-- ==================================================================
-- Author:  Julien Thibault, University of Utah
-- Created: 07/18/2013
-- Description: run this script to create the database schema.
-- 
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- ==================================================================

DROP TABLE IF EXISTS BIOSIM_DICT_COMPUTATIONAL_METHOD;
DROP TABLE IF EXISTS BIOSIM_DICT_COMPUTATIONAL_METHOD_CLASS;
DROP TABLE IF EXISTS BIOSIM_DICT_COMPUTATIONAL_METHOD_FAMILY;
DROP TABLE IF EXISTS BIOSIM_DICT_COMPUTATIONAL_METHOD_DICT_CLASS_DICT;

DROP TABLE IF EXISTS BIOSIM_DICT_DATA_GENERATION_METHOD;
DROP TABLE IF EXISTS BIOSIM_DICT_DATA_GENERATION_METHOD_TYPE;

DROP TABLE IF EXISTS BIOSIM_DICT_CALCULATION;
DROP TABLE IF EXISTS BIOSIM_DICT_CALCULATION_TYPE;

DROP TABLE IF EXISTS BIOSIM_DICT_BASIS_SET;
DROP TABLE IF EXISTS BIOSIM_DICT_BASIS_SET_TYPE;

DROP TABLE IF EXISTS BIOSIM_DICT_FORCE_FIELD;
DROP TABLE IF EXISTS BIOSIM_DICT_FORCE_FIELD_TYPE;

DROP TABLE IF EXISTS BIOSIM_DICT_ELECTROSTATICS_MODEL;

DROP TABLE IF EXISTS BIOSIM_DICT_ENSEMBLE_TYPE;
DROP TABLE IF EXISTS BIOSIM_DICT_BAROSTAT;
DROP TABLE IF EXISTS BIOSIM_DICT_THERMOSTAT;
DROP TABLE IF EXISTS BIOSIM_DICT_CONSTRAINT_ALGORITHM;

DROP TABLE IF EXISTS BIOSIM_DICT_SOFTWARE;
DROP TABLE IF EXISTS BIOSIM_DICT_FILE_FORMAT;

DROP TABLE IF EXISTS BIOSIM_DICT_PERIODIC_TABLE;
DROP TABLE IF EXISTS BIOSIM_DICT_ELEMENT_FAMILY;

DROP TABLE IF EXISTS BIOSIM_DICT_FUNCTIONAL_GROUP;

DROP TABLE IF EXISTS BIOSIM_DICT_RESIDUE;

-- ==================================================================
-- COMPUTATIONAL METHODS
-- ==================================================================

CREATE TABLE BIOSIM_DICT_COMPUTATIONAL_METHOD
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        CITATION TEXT,
        PRIMARY KEY (ID),
        UNIQUE UQ_COMPUTATIONAL_METHOD_ID(ID)
);

CREATE TABLE BIOSIM_DICT_COMPUTATIONAL_METHOD_CLASS
(
        ID INTEGER NOT NULL,
        SHORT_NAME VARCHAR(50),
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        TYPE_ID INTEGER,
        PRIMARY KEY (ID),
        UNIQUE UQ_COMPUTATIONAL_METHOD_CLASS_ID(ID),
        KEY (TYPE_ID)
);

CREATE TABLE BIOSIM_DICT_COMPUTATIONAL_METHOD_FAMILY
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_COMPUTATIONAL_METHOD_FAMILY_ID(ID)
);

CREATE TABLE BIOSIM_DICT_COMPUTATIONAL_METHOD_DICT_CLASS_DICT
(
        METHOD_ID INTEGER NOT NULL,
        CLASS_ID INTEGER NOT NULL,
        PRIMARY KEY (METHOD_ID, CLASS_ID),
        KEY (CLASS_ID),
        KEY (METHOD_ID)
);


-- ==================================================================
-- EXPERIMENT DATA GENERATING METHOD (E.G. ENHANCED SAMPLING)
-- ==================================================================

CREATE TABLE BIOSIM_DICT_DATA_GENERATION_METHOD
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        TYPE_ID INTEGER,
        CITATION TEXT,
        PRIMARY KEY (ID),
        UNIQUE UQ_DATA_GENERATION_METHOD_ID(ID),
        KEY (TYPE_ID)
);


CREATE TABLE BIOSIM_DICT_DATA_GENERATION_METHOD_TYPE
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_DATA_GENERATION_METHOD_TYPE_ID(ID)
);

-- ==================================================================
-- CALCULATIONS
-- ==================================================================

CREATE TABLE BIOSIM_DICT_CALCULATION
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        TYPE_ID INTEGER,
        PRIMARY KEY (ID),
        UNIQUE UQ_CALCULATION_ID(ID),
        KEY (TYPE_ID)
);

CREATE TABLE BIOSIM_DICT_CALCULATION_TYPE
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_CALCULATION_TYPE_ID(ID)
);

-- ==================================================================
-- CONSTRAINT ALGORITHM
-- ==================================================================

CREATE TABLE BIOSIM_DICT_CONSTRAINT_ALGORITHM
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        CITATION TEXT,
        PRIMARY KEY (ID),
        UNIQUE UQ_CONSTRAINT_ALGORITHM_ID(ID)
);

-- ==================================================================
-- FORCE FIELDS
-- ==================================================================
CREATE TABLE BIOSIM_DICT_FORCE_FIELD
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        CITATION TEXT,
        TYPE_ID INTEGER,
        COARSE_GRAIN BOOLEAN,
        PRIMARY KEY (ID),
        UNIQUE UQ_FORCE_FIELD_ID(ID),
        KEY (TYPE_ID)
);

CREATE TABLE BIOSIM_DICT_FORCE_FIELD_TYPE
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_FORCE_FIELD_TYPE_ID(ID)
);


CREATE TABLE BIOSIM_DICT_ELECTROSTATICS_MODEL
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        CITATION TEXT,
        PRIMARY KEY (ID),
        UNIQUE UQ_ELECTROSTATICS_MODEL_ID(ID)
);

-- ==================================================================
-- ENSEMBLE, THERMOSTAT, AND BAROSTAT
-- ==================================================================

CREATE TABLE BIOSIM_DICT_ENSEMBLE_TYPE
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_ENSEMBLE_TYPE_ID(ID)
);

CREATE TABLE BIOSIM_DICT_BAROSTAT
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        CITATION TEXT,
        PRIMARY KEY (ID),
        UNIQUE UQ_BAROSTAT_ID(ID)
);

CREATE TABLE BIOSIM_DICT_THERMOSTAT
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        CITATION TEXT,
        PRIMARY KEY (ID),
        UNIQUE UQ_THERMOSTAT_ID(ID)
);

-- ==================================================================
-- BASIS SETS
-- ==================================================================
CREATE TABLE BIOSIM_DICT_BASIS_SET
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        TYPE_ID INTEGER,
        CITATION TEXT,
        PRIMARY KEY (ID),
        UNIQUE UQ_BASIS_SET_ID(ID),
        KEY (TYPE_ID)
);

CREATE TABLE BIOSIM_DICT_BASIS_SET_TYPE
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_BASIS_SET_TYPE_ID(ID)
);

-- ==================================================================
-- SOFTWARE
-- ==================================================================

CREATE TABLE BIOSIM_DICT_SOFTWARE
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        CITATION TEXT,
        PRIMARY KEY (ID),
        UNIQUE UQ_SOFTWARE_ID(ID)
);

CREATE TABLE BIOSIM_DICT_FILE_FORMAT
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        SOFTWARE VARCHAR(50),
        PRIMARY KEY (ID),
        UNIQUE UQ_FILE_FORMAT_ID(ID)
);

-- ==================================================================
-- STRUCTURAL/CHEMICAL DATA
-- ==================================================================
CREATE TABLE BIOSIM_DICT_RESIDUE
(
        ID INTEGER NOT NULL,
        ONE_LETTER VARCHAR(1) NOT NULL,
        THREE_LETTER VARCHAR(3),
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        TYPE VARCHAR(50),
        FORMULA VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_RESIDUE_ID(ID)
);

CREATE TABLE BIOSIM_DICT_PERIODIC_TABLE
(
        ID INTEGER NOT NULL,
        SYMBOL VARCHAR(3) NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        MASS DOUBLE NOT NULL,
        TYPE_ID INTEGER NOT NULL,
        PRIMARY KEY (ID),
        UNIQUE UQ_PERIODIC_TABLE_ID(ID),
        KEY (TYPE_ID)
);

CREATE TABLE BIOSIM_DICT_ELEMENT_FAMILY
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_ELEMENT_FAMILY_ID(ID)
);

CREATE TABLE BIOSIM_DICT_FUNCTIONAL_GROUP
(
        ID INTEGER NOT NULL,
        TERM VARCHAR(50) NOT NULL,
        DESCRIPTION VARCHAR(255),
        PRIMARY KEY (ID),
        UNIQUE UQ_FUNCTIONAL_GOUP_ID(ID)
);
-- ==================================================================
-- ADD FOREIGN KEYS
-- ==================================================================

ALTER TABLE BIOSIM_DICT_COMPUTATIONAL_METHOD_CLASS ADD CONSTRAINT FK_COMPUTATIONAL_METHOD_CLASS_FAMILY 
        FOREIGN KEY (TYPE_ID) REFERENCES COMPUTATIONAL_METHOD_FAMILY (ID)
;

ALTER TABLE BIOSIM_DICT_COMPUTATIONAL_METHOD_DICT_CLASS_DICT ADD CONSTRAINT FK_COMPUTATIONAL_METHOD_TO_CLASS 
        FOREIGN KEY (CLASS_ID) REFERENCES COMPUTATIONAL_METHOD_CLASS (ID)
;

ALTER TABLE BIOSIM_DICT_COMPUTATIONAL_METHOD_DICT_CLASS_DICT ADD CONSTRAINT FK_COMPUTATIONAL_CLASS_TO_METHOD 
        FOREIGN KEY (METHOD_ID) REFERENCES COMPUTATIONAL_METHOD (ID)
;

ALTER TABLE BIOSIM_DICT_DATA_GENERATION_METHOD ADD CONSTRAINT FK_DATA_GENERATION_METHOD_TYPE
        FOREIGN KEY (TYPE_ID) REFERENCES DATA_GENERATION_METHOD_TYPE (ID)
;

ALTER TABLE BIOSIM_DICT_CALCULATION ADD CONSTRAINT FK_CALCULATION_TYPE
        FOREIGN KEY (TYPE_ID) REFERENCES CALCULATION_TYPE (ID)
;

ALTER TABLE BIOSIM_DICT_BASIS_SET ADD CONSTRAINT FK_BASIS_SET_TYPE
        FOREIGN KEY (TYPE_ID) REFERENCES BASIS_SET_TYPE (ID)
;

ALTER TABLE BIOSIM_DICT_FORCE_FIELD ADD CONSTRAINT FK_FF_DICTIONARY_FF_TYPE
        FOREIGN KEY (TYPE_ID) REFERENCES FORCE_FIELD_TYPE (ID)
;

ALTER TABLE BIOSIM_DICT_PERIODIC_TABLE ADD CONSTRAINT FK_PERIODIC_TABLE_ELEMENT_FAMILY
        FOREIGN KEY (TYPE_ID) REFERENCES ELEMENT_FAMILY (ID)
;


